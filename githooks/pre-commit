#!/usr/bin/env bash

# git pre-commit hook that runs an clang-format stylecheck
#  - aborts commit when commit does not comply with the style guidelines
#  - creates a patch of the proposed style changes

set -eu

readonly DELETE_OLD_PATCHES=false

# file extensions to parse
readonly FILE_EXTS=".c .h .cpp .hpp .cu"

canonicalize_filename () {
	local target_file=$1
	local physical_directory=""
	local result=""

	# need to restore the working directory after work
	pushd "$(dirname "$target_file")" > /dev/null
	target_file=$(basename $target_file)

	# iterate down a (possible) chain of symlinks
	while [[ -L "$target_file" ]]
	do
		target_file=$(readlink "$target_file")
		cd "$(dirname "$target_file")"
		target_file=$(basename "$target_file")
	done

	# compute the canonicalized name by finding the physical path
	# for the directory we're in and appending the target file
	physical_directory=$(pwd -P)
	result="${physical_directory}/${target_file}"

	popd > /dev/null

	echo "$result"
}

# check whether the given file matches any of the set extensions
matches_extension() {
	local filename=$(basename "$1")
	local extension=".${filename##*.}"
	local ext

	for ext in $FILE_EXTS;
	  do [[ "$ext" == "$extension" ]] && return 0;
	done

	return 1
}

# check for initial commit
if git rev-parse --verify HEAD >/dev/null 2>&1; then
	against=HEAD
else
	# initial commit: diff against an empty tree object
	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

readonly CLANG_FORMAT="$(which clang-format)"

if [[ ! -x "$CLANG_FORMAT" ]]; then
	printf "$CLANG_FORMAT is not found:\n"
	printf "\t$ sudo apt-get install $CLANG_FORMAT\n"
	exit 1
fi

# create a random filename to store our generated patch
prefix="pre-commit-clang-format"
suffix="$(date +%s)"
patch="/tmp/$prefix-$suffix.patch"

# clean up any older clang-format patches
$DELETE_OLD_PATCHES && rm -f /tmp/$prefix*.patch

# create one patch containing all changes to the files
git diff-index --cached --diff-filter=ACMR --name-only $against -- | while read file;
do
	# ignore file if we do check for file extensions and the file
	# does not match any of the extensions specified in $FILE_EXTS
	if ! matches_extension "$file"; then
		continue;
	fi

	# clang-format our sourcefile, create a patch with diff and append it to our $patch
	# The sed call is necessary to transform the patch from
	#    --- $file timestamp
	#    +++ - timestamp
	# to both lines working on the same file and having a a/ and b/ prefix.
	# Else it can not be applied with 'git apply'.
	"$CLANG_FORMAT" -style=file "$file" | \
		diff -u "$file" - | \
		sed -e "1s|--- |--- a/|" -e "2s|+++ -|+++ b/$file|" >> "$patch"
done

# if no patch has been generated all is ok, clean up the file stub and exit
if [[ ! -s "$patch" ]]; then
	printf "Files in this commit comply with the clang-format rules\n"
	rm -f "$patch"
	exit 0
fi

readonly VIOLATING_FILES=$(grep '^+++' "$patch"  | sed -e 's#+++ [ab]/##' | cut -f 1)

# a patch has been created, notify the user and exit
printf "\nThe following formatting violations were found:\n\n"
cat "$patch"

printf "\nYou can fix these formatting violations with (from the root directory of your repository):\n\n"
printf "\tgit apply $patch\n\n"
printf "Or running clang-format manually:\n\n"

for f in $VIOLATING_FILES; do
	printf "\tclang-format -i $f\n"
done

printf "\nAborting commit. Apply changes and commit again\n"
# printf "Skip checking with --no-verify (not recommended)\n"

exit 1
